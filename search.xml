<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Opencv-图像处理</title>
      <link href="2021/05/04/Opencv-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
      <url>2021/05/04/Opencv-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1-线性滤波"><a href="#1-线性滤波" class="headerlink" title="1.线性滤波"></a>1.线性滤波</h1><h2 id="1-1方框滤波"><a href="#1-1方框滤波" class="headerlink" title="1.1方框滤波"></a>1.1方框滤波</h2>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Opencv-数据结构</title>
      <link href="2021/05/04/Opencv-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>2021/05/04/Opencv-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Mat-基础图像容器"><a href="#1-Mat-基础图像容器" class="headerlink" title="1.Mat-基础图像容器"></a>1.Mat-基础图像容器</h1><h2 id="1-1-Mat结构使用"><a href="#1-1-Mat结构使用" class="headerlink" title="1.1 Mat结构使用"></a>1.1 Mat结构使用</h2><p>Mat是一个类，有两个数据部分组成：矩阵图（含矩阵尺寸、存储方法、存储地址等信息）和一个指向存储所有像素的指针。</p><h2 id="1-2显式创建Mat对象的七种方法"><a href="#1-2显式创建Mat对象的七种方法" class="headerlink" title="1.2显式创建Mat对象的七种方法"></a>1.2显式创建Mat对象的七种方法</h2><blockquote><p>书中列举了7种，此处记录一种</p></blockquote><p><strong>使用Mat()构造函数</strong></p><p>例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mat M(2,2,CV_8UC3,Scalar(0,0,255))</span><br></pre></td></tr></table></figure><p>参数：<br>行数、列数、存储元素的数据类型以及每个矩阵点的通道数</p><h1 id="2-常用数据结构和函数"><a href="#2-常用数据结构和函数" class="headerlink" title="2.常用数据结构和函数"></a>2.常用数据结构和函数</h1><h2 id="2-1-Point类"><a href="#2-1-Point类" class="headerlink" title="2.1 Point类"></a>2.1 Point类</h2><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Point point；</span><br><span class="line">point.x &#x3D; 10;</span><br><span class="line">point.y &#x3D; 8;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Point point &#x3D; Point(10,8);</span><br></pre></td></tr></table></figure><h2 id="2-2-Scalar类"><a href="#2-2-Scalar类" class="headerlink" title="2.2  Scalar类"></a>2.2  Scalar类</h2><p>Scalar表示具有四个元素的数组，被大量用于传递像素值，一般用三个参数，第四个不用可以不写。<br>参数表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scalar(a,b,c)</span><br></pre></td></tr></table></figure><p>表示，定义的RGB颜色值：红色分量为c，绿色分量为b，蓝色分量为a。</p><h2 id="2-3-Size类"><a href="#2-3-Size类" class="headerlink" title="2.3 Size类"></a>2.3 Size类</h2><p>使用频率最高的是下面这个构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Size_(_Tp _width, _Tp _height);</span><br></pre></td></tr></table></figure><p>另外代码末尾定义了模板类型的高度和宽度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_Tp width,height; &#x2F;&#x2F;宽度和高度</span><br></pre></td></tr></table></figure><p>可以用xxx.width ,xxx.height 分别表示xxx的宽度和高度</p><p>例：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Size(5,5);&#x2F;&#x2F;构造出的Size宽度和高度都为5，即xxx.width ,xxx.height 均为5</span><br></pre></td></tr></table></figure><h2 id="2-4-矩形的表示：Rect类"><a href="#2-4-矩形的表示：Rect类" class="headerlink" title="2.4 矩形的表示：Rect类"></a>2.4 矩形的表示：Rect类</h2><ul><li>Rect类的成员变量有x,y,width,height,分别为矩形左上角的点坐标，和矩形的宽度和高度。      </li><li>常用的成员函数有：<br> <strong>Size()</strong>  返回值为Size；<br> <strong>area()</strong>  返回矩形的面积；<br> <strong>contains(Point)</strong>  判断点是否在矩形内；<br> <strong>inside(Rect)</strong> 判断矩形是否在矩形内；<br> <strong>tl()</strong>  返回左上点坐标；<br> <strong>br()</strong>  返回右下点坐标；</li><li>求矩阵交集与并集： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Rect rect &#x3D; rect1 &amp; rect2;</span><br><span class="line">Rect rect &#x3D; rect1 | rect2;</span><br></pre></td></tr></table></figure></li><li>矩阵的平移和缩放：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Rect rectShift &#x3D; rect + point;</span><br><span class="line">Rect rectScale &#x3D; rect + size;</span><br></pre></td></tr></table></figure><h2 id="2-5-颜色转变空间：cvtColor-函数"><a href="#2-5-颜色转变空间：cvtColor-函数" class="headerlink" title="2.5 颜色转变空间：cvtColor()函数"></a>2.5 颜色转变空间：cvtColor()函数</h2><blockquote><p>作用:实现RBG\HSV\HSI等颜色空间的转换，也可装换为灰度图像</p></blockquote></li></ul><p>原型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void cvtColor(InpuyArray src, OutputArray dst, int code, int dstCn&#x3D;0)</span><br></pre></td></tr></table></figure><p>第一个参数为输入图像，第二个参数为输出图像，第三个参数为颜色空间转换的标识符，第四个为目标图像的通道数，0表示取原图像通道数。   </p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cvtColor(srcImage,dstImage,COLOR_GRAY2BGR);</span><br></pre></td></tr></table></figure><p>第三个参数具体查表。</p><h1 id="3-基本图形的绘制（以下函数需要自定义，暂不阐述）"><a href="#3-基本图形的绘制（以下函数需要自定义，暂不阐述）" class="headerlink" title="3.基本图形的绘制（以下函数需要自定义，暂不阐述）"></a>3.基本图形的绘制（以下函数需要自定义，暂不阐述）</h1><h2 id="3-1-DrawEllipse-函数"><a href="#3-1-DrawEllipse-函数" class="headerlink" title="3.1 DrawEllipse() 函数"></a><del>3.1 DrawEllipse() 函数</del></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void DrawLine(Mat img, double angle) &#x2F;&#x2F;绘制不同角度、相同尺寸的椭圆</span><br></pre></td></tr></table></figure><p>~~其中，函数定义内部使用了WINDOW_WIDTH,这是定义窗口大小的宏<br>与之相关的   ~~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Point(WINDOW_WIDTH&#x2F;2 ,WINDOW_WIDTH&#x2F;2)&#x2F;&#x2F;中心</span><br><span class="line">Size(WINDOW_WIDTH&#x2F;4, WINDOW_WIDTH&#x2F;16) &#x2F;&#x2F;外矩形框</span><br></pre></td></tr></table></figure><h2 id="3-2DrawFilledCircle"><a href="#3-2DrawFilledCircle" class="headerlink" title="3.2DrawFilledCircle()"></a><del>3.2DrawFilledCircle()</del></h2>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Opencv-HighGUI</title>
      <link href="2021/05/04/Opencv-HighGUI/"/>
      <url>2021/05/04/Opencv-HighGUI/</url>
      
        <content type="html"><![CDATA[<h1 id="1-图像的载入、显示和输出到文件"><a href="#1-图像的载入、显示和输出到文件" class="headerlink" title="1. 图像的载入、显示和输出到文件"></a>1. 图像的载入、显示和输出到文件</h1><h2 id="1-1imread-函数"><a href="#1-1imread-函数" class="headerlink" title="1.1imread()函数"></a>1.1imread()函数</h2><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mat imread(const string&amp; filename, int flags &#x3D; 1)</span><br></pre></td></tr></table></figure><p>第一个参数是需要载入的文件路径。<br>第二个参数flags是加载图像的颜色类型，一般可以忽略。</p><blockquote><p>取-1，已废置，忽略；<br>取0，始终将图像转换成灰度再返回；<br>取1，总是转换成彩色再返回；<br>取2，若载入图像的深度为16位或32位，就返回对应深度图像，否则，转换成8位再返回。</p></blockquote><h2 id="1-2-imshow-函数"><a href="#1-2-imshow-函数" class="headerlink" title="1.2 imshow()函数"></a>1.2 imshow()函数</h2><h3 id="原型-1"><a href="#原型-1" class="headerlink" title="原型"></a>原型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void inshow(const string&amp; winname, InputArray mat);</span><br></pre></td></tr></table></figure><p>第一个参数表示窗口标识名称。<br>第二个参数，InputArray类型的Mat，填需要显示的图像</p><h2 id="1-3-namedWindow函数"><a href="#1-3-namedWindow函数" class="headerlink" title="1.3 namedWindow函数"></a>1.3 namedWindow函数</h2><h3 id="原型-2"><a href="#原型-2" class="headerlink" title="原型"></a>原型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void nameWindow(const string&amp; winname,int flags &#x3D; WINDOW_AUTOSIZE)</span><br></pre></td></tr></table></figure><p>第一个参数填写被用作窗口的窗口标识符名称；<br>第二个参数，窗口的标识   </p><p><strong>作用：</strong>通过指定名字，创建一个可以作为图像和进度条的容器窗口。</p><h2 id="1-4-imwrite函数"><a href="#1-4-imwrite函数" class="headerlink" title="1.4 imwrite函数"></a>1.4 imwrite函数</h2><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool imwrite(const string&amp; filename,InputArray img, const vector&lt;int&gt;&amp; params&#x3D;vector());</span><br></pre></td></tr></table></figure><p>第一个参数，文件名，如“123.jpg”；<br>第二个参数，Mat类的图像数据；<br>第三个参数，保存编码，一般不需填写。  </p>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Opencv-环境配置</title>
      <link href="2021/05/04/Opencv-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>2021/05/04/Opencv-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="参考博客链接："><a href="#参考博客链接：" class="headerlink" title="参考博客链接："></a>参考博客链接：</h1><p><a href="https://blog.csdn.net/qq_41175905/article/details/80560429?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161537663616780265458665%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161537663616780265458665&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-1-80560429.pc_search_result_hbase_insert&amp;utm_term=vs2017opencv3%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B">https://blog.csdn.net/qq_41175905/article/details/80560429?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161537663616780265458665%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161537663616780265458665&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-1-80560429.pc_search_result_hbase_insert&amp;utm_term=vs2017opencv3%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B</a></p>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2021年工程训练简记</title>
      <link href="2021/05/04/2021%E5%B9%B4%E5%B7%A5%E7%A8%8B%E8%AE%AD%E7%BB%83%E7%AE%80%E8%AE%B0/"/>
      <url>2021/05/04/2021%E5%B9%B4%E5%B7%A5%E7%A8%8B%E8%AE%AD%E7%BB%83%E7%AE%80%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次win10无法访问openwrt|smb服务的解决方案</title>
      <link href="2021/02/23/%E8%AE%B0%E4%B8%80%E6%AC%A1win10%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AEopenwrt-smb%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>2021/02/23/%E8%AE%B0%E4%B8%80%E6%AC%A1win10%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AEopenwrt-smb%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>openwrt配置好SMB相关服务，在win10网络邻居可以看到OPENWRT主机，但是双击无法访问，错误代码“0x80070035”；而在安卓系统文件管理器客户端则可以正常访问。   </p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><ul><li><p>首先确保网络共享及发现已开启、相关服务正常开启并运行</p></li><li><p>新建文本，内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanWorkstation\Parameters]</span><br><span class="line"></span><br><span class="line">&quot;AllowInsecureGuestAuth&quot;&#x3D;dword:00000001</span><br></pre></td></tr></table></figure><p>格式更改为.reg,双击运行</p></li><li><p>如果注册表注册不了，请win键+R 运行 regedit.exe；<br>依次点开    HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanWorkstation\Parameters；   </p></li></ul><p>找到AllowInsecureGuestAuth，双击打开，把数值数据改为 1，然后点击确定。 </p><ul><li>结束<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1></li></ul><blockquote><p>有关账户问题可能会涉及，可尝试本地账户</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> smb </tag>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建hexo博客的记录</title>
      <link href="2021/02/18/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AE%B0%E5%BD%95/"/>
      <url>2021/02/18/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="0-介绍"><a href="#0-介绍" class="headerlink" title="0 介绍"></a>0 介绍</h1><h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h1><h1 id="2-平台"><a href="#2-平台" class="headerlink" title="2 平台"></a>2 平台</h1><h1 id="3-优化"><a href="#3-优化" class="headerlink" title="3 优化"></a>3 优化</h1>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitee Pages自动部署简记</title>
      <link href="2021/02/17/Gitee-Pages%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E7%AE%80%E8%AE%B0/"/>
      <url>2021/02/17/Gitee-Pages%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E7%AE%80%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我的博客是部署在github上的，但是在国内的访问速度并不理想。替代方案有国内的平台Gitee、Coding，本文主要讲述使用Gitee作为国内替代方案，并实现自动部署GiteePages。</p><h1 id="为什么选择Gitee"><a href="#为什么选择Gitee" class="headerlink" title="为什么选择Gitee"></a>为什么选择Gitee</h1><p>我是最先了解到Gitee，但是尝试后发现Gitee并不能自动部署你的Git Pages，需要Pro版才能每当你更新源代码时，才能自动部署。而且Gitee也不支持自定义域名。<br>而后又了解到coding，也有很多人使用Github+Coding双线方案。在Coding上部署时发现，现在的Coding静态网站是和腾讯云联系在一起，涉及到付费，并且未备案的域名也不能使用国内CDN，于是放弃了。<br>之后就在搜索有没有自动部署GiteePages的方案。</p><h1 id="自动部署方法"><a href="#自动部署方法" class="headerlink" title="自动部署方法"></a>自动部署方法</h1><blockquote><p>参考的是Github上的项目 <a href="https://github.com/yanglbme/gitee-pages-action">https://github.com/yanglbme/gitee-pages-action</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客备份设置</title>
      <link href="2021/02/17/hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%E8%AE%BE%E7%BD%AE/"/>
      <url>2021/02/17/hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>hexo博客是静态网站，数据文件储存于本地，展示文件则托管在Github上，当电脑出现问题时很容易造成数据丢失，重要的文件应该就是_posts文件夹中写的文章。常见的备份有便携式设备备份，还有把本地文件夹做成同步文件夹的。今天介绍的是guithub仓库备份。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li><p>把hexo根目录作为一个仓库，可以按默认的来，其实如果只备份有用的文件的话，就把没用的文件夹名字放在.gitignore文件里（里面已经写了一部分），为了方便，我们可以直接建立仓库。记住，最好把themes文件夹里的主题文件夹中的.git文件夹删去，使其变成一个独立的文件夹，否则当恢复备份的时候主题文件夹无法下载。</p></li><li><p>我把备份的文件夹放到博客仓库的新分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b hexobackup</span><br></pre></td></tr></table></figure><p>hexobackup是存放备份的分支名，名称可自定。</p></li><li><p>接下来就是普通的仓库操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;博客备份&quot;</span><br><span class="line">git push origin hexobackup</span><br></pre></td></tr></table></figure><h1 id="恢复备份"><a href="#恢复备份" class="headerlink" title="恢复备份"></a>恢复备份</h1></li></ol><ul><li>当要恢复博客时，选择好要存放的文件夹，执行’$ git clone <a href="https://github.com/yourgithubname/yourgithubname.github.io&#39;">https://github.com/yourgithubname/yourgithubname.github.io&#39;</a><blockquote><p>注意：最好把备份分支设为仓库默认分支，这样有利于恢复博客</p></blockquote></li><li>然后再’npm i’，就可以根据之前的’package.json’文件夹里的目录恢复所需插件。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这样，每次写完博客后，就可以分别执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;备份&quot;</span><br><span class="line">git push origin hexobackup  (注意，如果此时指向备份分支，就可以直接执行 git push)</span><br><span class="line"></span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkdownPad Pro</title>
      <link href="2021/02/16/MarkdownPad-Pro/"/>
      <url>2021/02/16/MarkdownPad-Pro/</url>
      
        <content type="html"><![CDATA[<h1 id="Pro版设置方法"><a href="#Pro版设置方法" class="headerlink" title="Pro版设置方法"></a>Pro版设置方法</h1><p><strong>Email</strong></p><blockquote><p><a href="mailto:&#83;&#x6f;&#x61;&#114;&#x33;&#x36;&#48;&#64;&#108;&#105;&#x76;&#101;&#x2e;&#99;&#111;&#x6d;">&#83;&#x6f;&#x61;&#114;&#x33;&#x36;&#48;&#64;&#108;&#105;&#x76;&#101;&#x2e;&#99;&#111;&#x6d;</a></p></blockquote><p><strong>Key</strong></p><blockquote><p>GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记openwrt折腾设置</title>
      <link href="2021/02/16/%E8%AE%B0openwrt%E6%8A%98%E8%85%BE%E8%AE%BE%E7%BD%AE/"/>
      <url>2021/02/16/%E8%AE%B0openwrt%E6%8A%98%E8%85%BE%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>简单记录一下折腾openwrt期间遇到的一些问题和简单设置</strong></p><h2 id="简单设置"><a href="#简单设置" class="headerlink" title="简单设置"></a>简单设置</h2><ul><li>方式：旁网关</li><li>配置：x86_64旧笔记本，U盘启动，单网口</li></ul><ol><li><p>刷好系统后，ssh连接openwrt或在笔记本进入交互界面，输入命令更改软路由ip（与自家主网关同网段）</p><p> <code>vim /etc/config/network</code></p></li><li><p>输入i进行编辑，编辑完后按ESC退出编辑，输入:wq以返回交互界面</p></li><li><p>软路由连路由器，同网段主机登陆后台</p></li><li><p>找到“网络-接口”，修改Lan口。</p></li><li><p>简单设置如下： 静态地址，ip已更改，网关改为主网关，DNS设置为主网关，关闭DHCP服务，桥接等<br><img src="https://cdn.jsdelivr.net/gh/Ethancy05/CDN-for-blog@1.0/BlogImage/%E8%AE%B0openwrt%E6%8A%98%E8%85%BE%E8%AE%BE%E7%BD%AE/1.png"></p></li></ol><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>到此处可能有些人已经可以上网了（从机设置不赘述）</p><p>但我在这还是遇到了问题，手机（或电脑）接入openwrt网关不能上网</p><p>后来查询资料，总结了两点</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ul><li><p>方法一：设置防火墙规则<br> <code>iptables -t nat -I POSTROUTING -j MASQUERADE</code></p></li><li><p>方法二：增加wan口，绑定lan，取消桥接</p></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/vmp_jin/article/details/111300822" title="旁路由设置的正确方式">https://blog.csdn.net/vmp_jin/article/details/111300822</a></p>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
          <category> 软路由 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt 软路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双线部署</title>
      <link href="2021/02/15/%E5%8F%8C%E7%BA%BF%E9%83%A8%E7%BD%B2/"/>
      <url>2021/02/15/%E5%8F%8C%E7%BA%BF%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="双线部署"><a href="#双线部署" class="headerlink" title="双线部署"></a>双线部署</h1>]]></content>
      
      
      <categories>
          
          <category> 关于 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在前面</title>
      <link href="2021/02/14/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/"/>
      <url>2021/02/14/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h1><p>本站建于2021/2/14 20:35:14，旨在记录生活中的点点滴滴，内容涵盖基础学科学习、嵌入式学习、计算机视觉学习、编程设计学习、网络通信学习以及感悟等。 </p>]]></content>
      
      
      <categories>
          
          <category> 关于 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
